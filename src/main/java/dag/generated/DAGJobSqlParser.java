/* Generated By:JavaCC: Do not edit this line. DAGJobSqlParser.java */
package dag.generated;

import dag.ast.*;

import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;

public class DAGJobSqlParser implements DAGJobSqlParserConstants {
    public static List<Statement> parse(InputStream input) throws Exception {
        DAGJobSqlParser parser = new DAGJobSqlParser(input);
        return parser.statements();
    }

    final public List<Statement> statements() throws ParseException {
        List<Statement> statements = new ArrayList<Statement>();
        Statement s;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CREATE:
                case INSERT:
                case SELECT:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            s = statement();
            statements.add(s);
        }
        jj_consume_token(0);
        {
            if (true) return statements;
        }
        throw new Error("Missing return statement in function");
    }

    final public Statement statement() throws ParseException {
        Statement s;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SELECT:
                s = selectStatement();
                break;
            case INSERT:
                s = insertStatement();
                break;
            case CREATE:
                s = createTableStatement();
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        {
            if (true) return s;
        }
        throw new Error("Missing return statement in function");
    }

    final public String identifier() throws ParseException {
        Token token;
        token = jj_consume_token(IDENTIFIER);
        {
            if (true) return token.image;
        }
        throw new Error("Missing return statement in function");
    }

    final public CreateTableStatement createTableStatement() throws ParseException {
        String tableName;
        List<Property> propertyList;
        jj_consume_token(CREATE);
        jj_consume_token(TABLE);
        tableName = identifier();
        propertyList = propertyList();
        {
            if (true) return new CreateTableStatement(tableName, propertyList);
        }
        throw new Error("Missing return statement in function");
    }

    final public List<Property> propertyList() throws ParseException {
        List<Property> propertyList = new ArrayList<Property>();
        Property property;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LEFT_BRACKET:
                jj_consume_token(LEFT_BRACKET);
                property = property();
                propertyList.add(property);
                label_2:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            break label_2;
                    }
                    jj_consume_token(COMMA);
                    property = property();
                    propertyList.add(property);
                }
                jj_consume_token(RIGHT_BRACKET);
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        {
            if (true) return propertyList;
        }
        throw new Error("Missing return statement in function");
    }

    final public Property property() throws ParseException {
        String name;
        PropertyType type;
        name = identifier();
        type = propertyType();
        {
            if (true) return new Property(name, type);
        }
        throw new Error("Missing return statement in function");
    }

    final public PropertyType propertyType() throws ParseException {
        Token token;
        token = jj_consume_token(TYPE);
        {
            if (true) return PropertyType.typeOf(token.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public InsertStatement insertStatement() throws ParseException {
        String tableName;
        List<SimpleExpression> valueList;
        jj_consume_token(INSERT);
        jj_consume_token(INTO);
        tableName = identifier();
        jj_consume_token(VALUES);
        valueList = valueList();
        {
            if (true) return new InsertStatement(tableName, valueList);
        }
        throw new Error("Missing return statement in function");
    }

    final public SelectStatement selectStatement() throws ParseException {
        List<Operation> operationList;
        String tableName;
        String group;
        String sort;
        jj_consume_token(SELECT);
        operationList = operationList();
        jj_consume_token(FROM);
        tableName = identifier();
        jj_consume_token(GROUPBY);
        group = identifier();
        jj_consume_token(SORTBY);
        sort = identifier();
        {
            if (true) return new SelectStatement(operationList, tableName, group, sort);
        }
        throw new Error("Missing return statement in function");
    }

    final public List<Operation> operationList() throws ParseException {
        List<Operation> operationList = new ArrayList<Operation>();
        Operation operation;
        operation = operation();
        operationList.add(operation);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    break label_3;
            }
            jj_consume_token(COMMA);
            operation = operation();
            operationList.add(operation);
        }
        {
            if (true) return operationList;
        }
        throw new Error("Missing return statement in function");
    }

    final public Operation operation() throws ParseException {
        String name;
        List<SimpleExpression> opValueList;
        name = identifier();
        jj_consume_token(LEFT_BRACKET);
        opValueList = opValueList();
        jj_consume_token(RIGHT_BRACKET);
        {
            if (true) return new Operation(name, opValueList);
        }
        throw new Error("Missing return statement in function");
    }

    final public List<SimpleExpression> opValueList() throws ParseException {
        List<SimpleExpression> opValueList = new ArrayList<SimpleExpression>();
        SimpleExpression value;
        value = simpleExpression();
        opValueList.add(value);
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_4;
            }
            jj_consume_token(COMMA);
            value = simpleExpression();
            opValueList.add(value);
        }
        {
            if (true) return opValueList;
        }
        throw new Error("Missing return statement in function");
    }

    final public List<SimpleExpression> valueList() throws ParseException {
        List<SimpleExpression> valueList = new ArrayList<SimpleExpression>();
        SimpleExpression value;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LEFT_BRACKET:
                jj_consume_token(LEFT_BRACKET);
                value = simpleExpression();
                valueList.add(value);
                label_5:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[6] = jj_gen;
                            break label_5;
                    }
                    jj_consume_token(COMMA);
                    value = simpleExpression();
                    valueList.add(value);
                }
                jj_consume_token(RIGHT_BRACKET);
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
        {
            if (true) return valueList;
        }
        throw new Error("Missing return statement in function");
    }

    final public SimpleExpression simpleExpression() throws ParseException {
        Object value;
        PropertyType type;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                value = identifier();
                type = PropertyType.CHAR;
                break;
            case INTEGER_LITERAL:
                value = integer();
                type = PropertyType.INT;
                break;
            case STRING:
                value = string();
                type = PropertyType.CHAR;
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return new SimpleExpression(value, type);
        }
        throw new Error("Missing return statement in function");
    }

    final public int integer() throws ParseException {
        Token token;
        token = jj_consume_token(INTEGER_LITERAL);
        {
            if (true) return Integer.parseInt(token.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public String string() throws ParseException {
        Token token;
        token = jj_consume_token(STRING);
        String image = token.image;
        {
            if (true) return image.substring(1, image.length() - 1);
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Generated Token Manager.
     */
    public DAGJobSqlParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[9];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x4a0, 0x4a0, 0x40000, 0x200000, 0x40000, 0x40000, 0x40000, 0x200000, 0x46000000,};
    }

    /**
     * Constructor with InputStream.
     */
    public DAGJobSqlParser(InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public DAGJobSqlParser(InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new DAGJobSqlParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public DAGJobSqlParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new DAGJobSqlParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public DAGJobSqlParser(DAGJobSqlParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(DAGJobSqlParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private List jj_expentries = new ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[31];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 9; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 31; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
